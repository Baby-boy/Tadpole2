-- MongoDB数据备份
mongodump -h <hostname><:port> -d dbname -o <path>
	-h：MongDB所在服务器地址，可以指定端口号
	-d：需要备份的数据库实例
	-o：备份的数据存放位置
	例：mongodump -h 127.0.0.1:27017 -d ctrlcrm -o ~/test  --> 会在test目录下生成一个ctrlcrm文件夹，存储备份数据
	
-- MongoDB数据恢复
mongorestore -h <hostname><:port> -d dbname <path>
	-h：MongDB所在服务器地址，可以指定端口号
	-d：需要恢复的数据库实例，名称可自定义
	<path>：设置备份数据所在位置
	--drop：恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用
	--dir：指定备份的目录 
	注意事项：不能同时指定 <path> 和 --dir 选项
	
-- 导出表
mongoexport --collection ctrlcontract-dev --db contractVersionDO --out ../backup/contractVersionDO.json
--host ：要导出数据库 ip
--port ：要导出的实例节点端口号
--username ：数据库用户名
--password ：数据库用户密码
--collection ：要导出的表名
--db ：要导出的表所在数据库名
--out ：要导出的文件路径(默认为当前文件夹)

-- 导入表
mongoimport --collection ctrlcontract-dev --db bak-contractVersionDO --file ../backup/contractVersionDO.json
-- host ：要导入的数据库 ip
--port ：要导入的实例节点端口号
--username ：数据库用户名
--password ：数据库用户密码
--collection ：要导入的表名
--db ：要导入的表所在数据库名
--file ：要导入的源文件路径(默认为当前文件夹

	
-- 查询批量更新
db.getCollection('financeSalesPaybackRecordDO').find({'paybackAmount':{$type:2,$ne:"0"}}).forEach(function(x){
	x.paybackAmount = NumberLong(x.paybackAmount) * 100;
	db.getCollection('financeSalesPaybackRecordDO').save(x);
})

-- 更新
db.getCollection('financeSalesPaybackRecordDO').update({'merchantId':'1'},{$set:{'deleted':'0'}})

-- 批量更新
db.getCollection('financeSalesPaybackRecordDO').find({'merchantId':'1'}).forEach(function(x){
	db.getCollection('financeSalesPaybackRecordDO').update({"_id":x._id},{$set:{'deleted':'0'}})
})

-- 删除
db.getCollection('financeSalesPaybackRecordDO').remove({'deleted':'0'})

-- 数据类型
Type					Number			Alias					Notes
Double					1				“double”	
String					2				“string”	
Object					3				“object”	
Array					4				“array”	
Binary data				5				“binData”	
Undefined				6				“undefined”				Deprecated.
ObjectId				7				“objectId”	
Boolean					8				“bool”	
Date					9				“date”	
Null					10				“null”	
Regular Expression		11				“regex”	
DBPointer				12				“dbPointer”				Deprecated.
JavaScript				13				“javascript”	
Symbol					14				“symbol”				Deprecated.
JavaScript (with scope)	15				“javascriptWithScope”	
32-bit integer			16				“int”	
Timestamp				17				“timestamp”	
64-bit integer			18				“long”	
Decimal128				19				“decimal”				New in version 3.4.
Min key					-1				“minKey”	
Max key					127				“maxKey”